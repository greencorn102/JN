#1#
### TensorFlow to TFLite converter
import tensorflow as tf
from keras.models import load_model

model_opt=tf.keras.models.load_model('tfmodel.h5', compile=False)
converter=tf.lite.TFLiteConverter.from_keras_model(model_opt)
converter.optimizations = [tf.lite.Optimize.DEFAULT]
tfl_model=converter.convert()
open("tflmodel.tflite","wb").write(tfl_model)


#2#
### h5 format to pb format converter

import tensorflow as tf
from tensorflow.python.framework import graph_io
from tensorflow.keras.models import load_model


# Clear any previous session.
tf.keras.backend.clear_session()

def freeze_graph(graph, session, output, save_pb_dir='.', save_pb_name='pbmmodel.pb', save_pb_as_text=False):
    with graph.as_default():
        graphdef_inf = tf.graph_util.remove_training_nodes(graph.as_graph_def())
        graphdef_frozen = tf.graph_util.convert_variables_to_constants(session, graphdef_inf, output)
        graph_io.write_graph(graphdef_frozen, save_pb_dir, save_pb_name, as_text=save_pb_as_text)
        return graphdef_frozen

tf.keras.backend.set_learning_phase(0)

model = load_model('pruned_export.h5')

session = tf.keras.backend.get_session()

INPUT_NODE = [t.op.name for t in model.inputs]
OUTPUT_NODE = [t.op.name for t in model.outputs]
print(INPUT_NODE, OUTPUT_NODE)
frozen_graph = freeze_graph(session.graph, session, [out.op.name for out in model.outputs], save_pb_dir=save_pb_dir)


#3#
### pytorch with CUDA for Jetson nano
# https://stackoverflow.com/questions/73250147/pytorch-cuda-is-not-available
## DEPENDENCIES:
sudo apt-get install libopenblas-dev
wget https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl -O torch-1.8.0-cp36-cp36m-linux_aarch64.whl

pip3 install numpy torch-1.8.0-cp36-cp36m-linux_aarch64.whl



#4#
### pytorch CUDA for PC
# https://pytorch.org/get-started/locally/
pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu117
